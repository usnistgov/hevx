#version 460 core
#extension GL_NV_ray_tracing : require

layout(push_constant) uniform PushConstants {
  vec4 padding0;
  float iTime;
  float iTimeDelta;
  float iFrameRate;
  float iFrame;
  vec3 padding1;
  bool bDebugNormals;
  vec4 EyePosition;
  mat4 ModelMatrix;
  mat4 ModelViewMatrix;
  mat3 NormalMatrix;
};

layout(set = 0, binding = 0) uniform MatricesBuffer {
  mat4 ViewMatrix;
  mat4 ViewMatrixInverse;
  mat4 ProjectionMatrix;
  mat4 ProjectionMatrixInverse;
};

layout(set = 1, binding = 0) uniform accelerationStructureNV scene;
layout(set = 1, binding = 1, rgba8) uniform image2D outputImage;

layout(location = 0) rayPayloadNV vec4 hitValue;

void main() {
  // gl_LaunchIDNV is the integer coordinates of the pixel in outputImage
  const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(.5f);
  // gl_LaunchSizeNV is the dimensions of outputImage
  // uv is the normalized coordinates of the pixel in outputImage
  const vec2 uv = pixelCenter / vec2(gl_LaunchSizeNV.xy);
  // ndc ranges from [-1, -1]
  const vec2 ndc = uv * 2.f - 1.f;

  // EyePosition is the world-space coordinates of the camera.
  const vec4 origin = EyePosition;
  // target is the view-space coordinates reverse-projected from ndc
  const vec4 target = ProjectionMatrixInverse * vec4(ndc.x, ndc.y, 1.f, 1.f);
  // HEV is -Z up for the ViewMatrix.
  // direction is the world-space direction of the ray
  const vec4 direction = ViewMatrixInverse * vec4(normalize(target.xyz), 0.f);

  traceNV(scene,               // topLevel
          gl_RayFlagsOpaqueNV, // rayFlags
          0xF,                 // cullMask
          0,                   // sbtRecordOffset
          0,                   // sbtRecordStride
          0,                   // missIndex
          origin.xyz,          // origin
          0.f,                 // Tmin
          direction.xyz,       // direction
          1e+38f,              // Tmax
          0                    // payload
  );

  imageStore(outputImage, ivec2(gl_LaunchIDNV.xy), hitValue);
}

